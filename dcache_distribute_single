#!/usr/bin/env python
# Tool to distribute a single datasets on dCache
# (tries to accomplish an optimal distribution via simulated annealing)
# by Fred Stober (stober@cern.ch)

import sys, os, copy, random, time, threading, optparse
from toolKIT import json
from toolKIT.utils import expath, progress, get_cached
from toolKIT.chimera import dCacheInfo, get_chimera_data
from toolKIT.dCache import get_pool_infos
from toolKIT.lfntools import fn2ddn
from toolKIT.dCache_distribute import filterMoveable, writeTransferCommands

dCacheWebHost = 'http://192.108.45.36:2288'
chimera_path = expath('~/storage_scratch/chimera-dump/current')

parser = optparse.OptionParser()
parser.add_option("-f", "--filename", dest="fn", default=None, help="select by filename")
parser.add_option("-m", "--maxfiles", dest="maxfiles", default=None, type=int, help="select by max number of files in dataset")
parser.add_option("-l", "--filelist", dest="filelist", default=None, help="file with fileinfos")
parser.add_option("-S", "--store_filelist", dest="store_filelist", default=None, help="store fileinfos")
parser.add_option("-L", "--load_transfers", dest="load_transfers", default=None, help="store transfers")

parser.add_option("-t", "--threads", dest="Nthreads", default=10, type=int, help="number of threads")
parser.add_option("-i", "--iterations", dest="Niter", default=100, type=int, help="number of iterations")
parser.add_option("-s", "--max_steps", dest="Nsteps", default=36, type=int, help="number of steps")
parser.add_option("-T", "--store_transfers", dest="store_transfers", default='transfers', help="store transfers")
opts, args = parser.parse_args()

# Select files according to lfn / number of files in dataset
def getFileInfos(opts):
	if opts.filelist:
		return json.load(open(opts.filelist))
	fileInfos = []
	ds_files = {}
	if opts.maxfiles:
		for entry in progress(filterMoveable(get_chimera_data(chimera_path))):
			ds = fn2ddn(entry[dCacheInfo.pfn])
			ds_files[ds] = ds_files.get(ds, 0) + 1
		print len(ds_files), len(filter(lambda ds: ds_files.get(ds, 0) <= opts.maxfiles, ds_files))
	for entry in progress(filterMoveable(get_chimera_data(chimera_path))):
		if opts.fn and (opts.fn not in entry[dCacheInfo.pfn]):
			continue
		if opts.maxfiles:
			ds = fn2ddn(entry[dCacheInfo.pfn])
			if ds_files.get(ds, 0) > opts.maxfiles:
				continue
		if 'disk-only' not in entry[dCacheInfo.pfn]:
			continue
		for loc in entry[dCacheInfo.location]:
			fileInfos.append((entry[dCacheInfo.dcache_id], loc, entry[dCacheInfo.size]))
	if opts.store_filelist:
		json.dump(fileInfos, open(opts.store_filelist, 'w'))
	return fileInfos

# Apply transfer list to fileinfos
def applyTransfers(fileList, transferList):
	idlocMap = dict(map(lambda (id, size, s, t): (id + s, t), transferList))
	return map(lambda (id, loc, size): (id, idlocMap.get(id + loc, loc), size), fileList)

